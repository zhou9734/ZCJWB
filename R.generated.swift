// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.qRCode.validateImages()
    storyboard.qRCode.validateViewControllers()
  }
  
  struct file {
    static var emoticonsBundle: NSURL? { return _R.hostingBundle?.URLForResource("Emoticons", withExtension: "bundle") }
    static var mainVCSettingsJson: NSURL? { return _R.hostingBundle?.URLForResource("MainVCSettings", withExtension: "json") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var ad_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "ad_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "ad_background") } }
    static var alipay_msp_arrow_left: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "alipay_msp_arrow_left", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "alipay_msp_arrow_left") } }
    static var avatar_default: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_default", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_default") } }
    static var avatar_default_big: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_default_big", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_default_big") } }
    static var avatar_default_small: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_default_small", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_default_small") } }
    static var avatar_enterprise_vip: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_enterprise_vip", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_enterprise_vip") } }
    static var avatar_grassroot: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_grassroot", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_grassroot") } }
    static var avatar_vgirl: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_vgirl", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_vgirl") } }
    static var avatar_vip: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "avatar_vip", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "avatar_vip") } }
    static var back: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "back", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "back") } }
    static var barbuttonicon_back: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "barbuttonicon_back", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "barbuttonicon_back") } }
    static var barbuttonicon_more: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "barbuttonicon_more", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "barbuttonicon_more") } }
    static var camera_tag_delete_right: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "camera_tag_delete_right", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "camera_tag_delete_right") } }
    static var common_button_big_orange: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_button_big_orange", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_button_big_orange") } }
    static var common_button_big_orange_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_button_big_orange_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_button_big_orange_highlighted") } }
    static var common_button_white_disable: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_button_white_disable", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_button_white_disable") } }
    static var common_feed_image_gif: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_feed_image_gif", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_feed_image_gif") } }
    static var common_icon_membership: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership") } }
    static var common_icon_membership_expired: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_expired", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_expired") } }
    static var common_icon_membership_level1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level1") } }
    static var common_icon_membership_level2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level2") } }
    static var common_icon_membership_level3: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level3") } }
    static var common_icon_membership_level4: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level4") } }
    static var common_icon_membership_level5: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level5", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level5") } }
    static var common_icon_membership_level6: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "common_icon_membership_level6", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "common_icon_membership_level6") } }
    static var compose_emoticonbutton_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_emoticonbutton_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_emoticonbutton_background") } }
    static var compose_emoticonbutton_background_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_emoticonbutton_background_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_emoticonbutton_background_highlighted") } }
    static var compose_emotion_delete: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_emotion_delete", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_emotion_delete") } }
    static var compose_emotion_delete_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_emotion_delete_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_emotion_delete_highlighted") } }
    static var compose_guide_check_box_default: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_guide_check_box_default", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_guide_check_box_default") } }
    static var compose_guide_check_box_right: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_guide_check_box_right", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_guide_check_box_right") } }
    static var compose_image_longimage: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_image_longimage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_image_longimage") } }
    static var compose_locatebutton_ready: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_locatebutton_ready", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_locatebutton_ready") } }
    static var compose_locatebutton_succeeded: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_locatebutton_succeeded", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_locatebutton_succeeded") } }
    static var compose_mentionbutton_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_mentionbutton_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_mentionbutton_background") } }
    static var compose_mentionbutton_background_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_mentionbutton_background_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_mentionbutton_background_highlighted") } }
    static var compose_photo_original: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_photo_original", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_photo_original") } }
    static var compose_photo_original_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_photo_original_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_photo_original_highlighted") } }
    static var compose_photo_photograph: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_photo_photograph", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_photo_photograph") } }
    static var compose_pic_add: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_pic_add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_pic_add") } }
    static var compose_publicbutton: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_publicbutton", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_publicbutton") } }
    static var compose_toolbar_more: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_toolbar_more", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_toolbar_more") } }
    static var compose_toolbar_more_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_toolbar_more_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_toolbar_more_highlighted") } }
    static var compose_toolbar_picture: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_toolbar_picture", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_toolbar_picture") } }
    static var compose_toolbar_picture_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_toolbar_picture_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_toolbar_picture_highlighted") } }
    static var compose_trendbutton_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_trendbutton_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_trendbutton_background") } }
    static var compose_trendbutton_background_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "compose_trendbutton_background_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "compose_trendbutton_background_highlighted") } }
    static var defaultLine: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "DefaultLine", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "DefaultLine") } }
    static var launchImage: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "LaunchImage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "LaunchImage") } }
    static var menu_PopOver_BG: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "Menu_PopOver_BG", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "Menu_PopOver_BG") } }
    static var message_group_code: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "message_group_code", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "message_group_code") } }
    static var more: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "more", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "more") } }
    static var navigationbar_arrow_down: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_arrow_down", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_arrow_down") } }
    static var navigationbar_arrow_up: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_arrow_up", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_arrow_up") } }
    static var navigationbar_friendattention: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_friendattention", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_friendattention") } }
    static var navigationbar_friendattention_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_friendattention_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_friendattention_highlighted") } }
    static var navigationbar_pop: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_pop", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_pop") } }
    static var navigationbar_pop_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "navigationbar_pop_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "navigationbar_pop_highlighted") } }
    static var new_feature_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_1") } }
    static var new_feature_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_2") } }
    static var new_feature_3: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_3") } }
    static var new_feature_4: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_4") } }
    static var new_feature_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_button") } }
    static var new_feature_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_button_highlighted") } }
    static var new_feature_finish_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_finish_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_finish_button") } }
    static var new_feature_finish_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_finish_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_finish_button_highlighted") } }
    static var new_feature_share_false: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_share_false", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_share_false") } }
    static var new_feature_share_true: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "new_feature_share_true", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "new_feature_share_true") } }
    static var options_pointer: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "options_pointer", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "options_pointer") } }
    static var popover_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "popover_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "popover_background") } }
    static var popover_background_left: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "popover_background_left", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "popover_background_left") } }
    static var popover_background_right: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "popover_background_right", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "popover_background_right") } }
    static var preview_like_icon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "preview_like_icon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "preview_like_icon") } }
    static var preview_like_icon_disable: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "preview_like_icon_disable", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "preview_like_icon_disable") } }
    static var preview_like_icon_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "preview_like_icon_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "preview_like_icon_highlighted") } }
    static var qrcode_border: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_border", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_border") } }
    static var qrcode_button_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_button_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_button_background") } }
    static var qrcode_embeddedimage_shadow: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_embeddedimage_shadow", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_embeddedimage_shadow") } }
    static var qrcode_navigationbar_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_navigationbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_navigationbar_background") } }
    static var qrcode_scanline_barcode: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_scanline_barcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_scanline_barcode") } }
    static var qrcode_scanline_qrcode: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_scanline_qrcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_scanline_qrcode") } }
    static var qrcode_tabbar_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tabbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tabbar_background") } }
    static var qrcode_tabbar_icon_barcode: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tabbar_icon_barcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tabbar_icon_barcode") } }
    static var qrcode_tabbar_icon_barcode_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tabbar_icon_barcode_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tabbar_icon_barcode_highlighted") } }
    static var qrcode_tabbar_icon_qrcode: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tabbar_icon_qrcode", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tabbar_icon_qrcode") } }
    static var qrcode_tabbar_icon_qrcode_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tabbar_icon_qrcode_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tabbar_icon_qrcode_highlighted") } }
    static var qrcode_tip_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "qrcode_tip_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "qrcode_tip_background") } }
    static var tabbar_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_background") } }
    static var tabbar_compose_background_icon_add: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_background_icon_add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_background_icon_add") } }
    static var tabbar_compose_background_icon_close: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_background_icon_close", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_background_icon_close") } }
    static var tabbar_compose_background_icon_return: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_background_icon_return", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_background_icon_return") } }
    static var tabbar_compose_below_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_below_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_below_background") } }
    static var tabbar_compose_below_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_below_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_below_button") } }
    static var tabbar_compose_below_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_below_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_below_button_highlighted") } }
    static var tabbar_compose_book: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_book", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_book") } }
    static var tabbar_compose_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_button") } }
    static var tabbar_compose_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_button_highlighted") } }
    static var tabbar_compose_camera: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_camera", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_camera") } }
    static var tabbar_compose_delete: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_delete", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_delete") } }
    static var tabbar_compose_envelope: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_envelope", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_envelope") } }
    static var tabbar_compose_friend: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_friend", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_friend") } }
    static var tabbar_compose_icon_add: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_icon_add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_icon_add") } }
    static var tabbar_compose_icon_add_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_icon_add_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_icon_add_highlighted") } }
    static var tabbar_compose_idea: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_idea", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_idea") } }
    static var tabbar_compose_lbs: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_lbs", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_lbs") } }
    static var tabbar_compose_left_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_left_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_left_button") } }
    static var tabbar_compose_left_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_left_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_left_button_highlighted") } }
    static var tabbar_compose_more: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_more", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_more") } }
    static var tabbar_compose_more_mask: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_more_mask", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_more_mask") } }
    static var tabbar_compose_music: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_music", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_music") } }
    static var tabbar_compose_notloaded: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_notloaded", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_notloaded") } }
    static var tabbar_compose_photo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_photo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_photo") } }
    static var tabbar_compose_review: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_review", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_review") } }
    static var tabbar_compose_right_button: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_right_button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_right_button") } }
    static var tabbar_compose_right_button_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_right_button_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_right_button_highlighted") } }
    static var tabbar_compose_shooting: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_shooting", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_shooting") } }
    static var tabbar_compose_transfer: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_transfer", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_transfer") } }
    static var tabbar_compose_video: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_video", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_video") } }
    static var tabbar_compose_voice: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_voice", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_voice") } }
    static var tabbar_compose_wbcamera: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_wbcamera", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_wbcamera") } }
    static var tabbar_compose_weibo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_compose_weibo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_compose_weibo") } }
    static var tabbar_discover: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_discover", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_discover") } }
    static var tabbar_discover_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_discover_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_discover_highlighted") } }
    static var tabbar_home: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_home", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_home") } }
    static var tabbar_home_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_home_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_home_highlighted") } }
    static var tabbar_message_center: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_message_center", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_message_center") } }
    static var tabbar_message_center_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_message_center_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_message_center_highlighted") } }
    static var tabbar_profile: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_profile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_profile") } }
    static var tabbar_profile_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tabbar_profile_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tabbar_profile_highlighted") } }
    static var tableview_loading: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tableview_loading", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tableview_loading") } }
    static var tableview_pull_refresh: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "tableview_pull_refresh", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "tableview_pull_refresh") } }
    static var timeline_card_bottom_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_card_bottom_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_card_bottom_background") } }
    static var timeline_card_bottom_line_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_card_bottom_line_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_card_bottom_line_highlighted") } }
    static var timeline_card_middle_background: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_card_middle_background", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_card_middle_background") } }
    static var timeline_card_middle_background_highlighted: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_card_middle_background_highlighted", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_card_middle_background_highlighted") } }
    static var timeline_icon_comment: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_icon_comment", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_icon_comment") } }
    static var timeline_icon_like: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_icon_like", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_icon_like") } }
    static var timeline_icon_retweet: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_icon_retweet", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_icon_retweet") } }
    static var timeline_icon_unlike: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "timeline_icon_unlike", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "timeline_icon_unlike") } }
    static var visitordiscover_feed_image_house: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_feed_image_house", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_feed_image_house") } }
    static var visitordiscover_feed_image_smallicon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_feed_image_smallicon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_feed_image_smallicon") } }
    static var visitordiscover_feed_mask_smallicon: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_feed_mask_smallicon", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_feed_mask_smallicon") } }
    static var visitordiscover_image_message: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_image_message", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_image_message") } }
    static var visitordiscover_image_profile: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_image_profile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_image_profile") } }
    static var visitordiscover_signup_logo: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "visitordiscover_signup_logo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "visitordiscover_signup_logo") } }
  }
  
  struct nib {
    static var toolView: _R.nib._ToolView { return _R.nib._ToolView() }
    static var visitorView: _R.nib._VisitorView { return _R.nib._VisitorView() }
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct qRCode {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "QRCode", bundle: _R.hostingBundle) }
      static var qRCodeSB: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("QRCodeSB") as? UINavigationController }
      
      static func validateImages() {
        assert(UIImage(named: "qrcode_border") != nil, "[R.swift] Image named 'qrcode_border' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_tabbar_icon_qrcode") != nil, "[R.swift] Image named 'qrcode_tabbar_icon_qrcode' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_tabbar_icon_barcode") != nil, "[R.swift] Image named 'qrcode_tabbar_icon_barcode' is used in storyboard 'QRCode', but couldn't be loaded.")
        assert(UIImage(named: "qrcode_scanline_barcode") != nil, "[R.swift] Image named 'qrcode_scanline_barcode' is used in storyboard 'QRCode', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(qRCodeSB != nil, "[R.swift] ViewController with identifier 'qRCodeSB' could not be loaded from storyboard 'QRCode' as 'UINavigationController'.")
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.zhou.ZCJWB") }
  
  struct nib {
    struct _ToolView: NibResource {
      var instance: UINib { return UINib.init(nibName: "ToolView", bundle: _R.hostingBundle) }
      var name: String { return "ToolView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> ToolView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ToolView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _VisitorView: NibResource {
      var instance: UINib { return UINib.init(nibName: "VisitorView", bundle: _R.hostingBundle) }
      var name: String { return "VisitorView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> VisitorView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? VisitorView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}